import * as React from 'react';
import * as PropTypes from 'prop-types';
import { interfaces } from 'inversify';
import { ReactContextKey } from './internal/utils';
interface ProviderProps {
    container: interfaces.Container;
    standalone?: boolean;
}
declare class Provider extends React.Component<ProviderProps, {}> {
    static contextTypes: {
        [ReactContextKey]: PropTypes.Requireable<object>;
    };
    static childContextTypes: {
        [ReactContextKey]: PropTypes.Validator<object>;
    };
    static defaultProps: {
        standalone: boolean;
    };
    constructor(props: ProviderProps, context: any);
    getChildContext(): {
        [ReactContextKey]: interfaces.Container;
    };
    UNSAFE_componentWillReceiveProps(nextProps: ProviderProps): void;
    render(): string | number | boolean | {} | React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> | React.ReactPortal | null | undefined;
}
export { ProviderProps, Provider };
export default Provider;
