/// <reference types="react" />
import { ICell, IRow, OnSelect } from '../Table';
export interface ISelectTransform {
    onSelect: OnSelect;
    canSelectAll: boolean;
}
/**
 * Function to join parent and their children so they can be rendered in tbody.
 *
 * @param {*} rows raw data to find out if it's child or parent.
 * @param {*} children data to render (array of react children).
 */
export declare const mapOpenedRows: (rows: IRow[], children: any) => IRow[];
/**
 * Function to calculate columns based on custom config.
 * It adds some custom cells for collapse, select, if expanded row and actions.
 *
 * @param {*} headerRows custom object with described table header cells.
 * @param {*} extra object with custom callbacks.
 * @returns {*} expected object for react tabular table.
 */
export declare const calculateColumns: (headerRows: (string | ICell)[], extra: any) => {
    property: string;
    extraParams: any;
    data: any;
    header: {
        label: string | ICell;
        transforms: import("../Table").ITransform[];
        formatters: import("../Table").IFormatter[];
        title?: import("react").ReactNode;
        cellTransforms?: import("../Table").ITransform[];
        columnTransforms?: import("../Table").ITransform[];
        cellFormatters?: import("../Table").IFormatter[];
        props?: any;
        data?: any;
        header?: any;
        cell?: any;
        dataLabel?: string;
    };
    cell: {
        transforms: import("../Table").ITransform[];
        formatters: import("../Table").IFormatter[];
        title?: import("react").ReactNode;
        cellTransforms?: import("../Table").ITransform[];
        columnTransforms?: import("../Table").ITransform[];
        cellFormatters?: import("../Table").IFormatter[];
        props?: any;
        data?: any;
        header?: any;
        cell?: any;
        dataLabel?: string;
    };
    props: any;
}[];
//# sourceMappingURL=headerUtils.d.ts.map